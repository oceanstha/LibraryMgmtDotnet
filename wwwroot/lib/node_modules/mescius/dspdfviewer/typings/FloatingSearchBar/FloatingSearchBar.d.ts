/// <reference path="../vendor/i18next.d.ts" />
//@ts-ignore
import { i18n } from 'i18next';
/// <reference path="../vendor/react/react.d.ts" />
//@ts-ignore
import React from 'react';
import GcPdfViewer from '../GcPdfViewer';
import { SearchPanelBase } from '../Search/SearchPanelBase';
import { SearchPanelProps } from '../Search/types';
import { ReplaceHelper } from './ReplaceHelper';
import { FloatingSearchBarModel } from './types';
export declare class FloatingSearchBar extends SearchPanelBase {
    state: FloatingSearchBarModel;
    private _pendingInputFocus;
    private _searchQueryInput;
    private _settingsDropdown;
    private _replaceHelper;
    constructor(props: SearchPanelProps);
    componentWillUnmount(): void;
    onEnterKey(): Promise<void>;
    onEscKey(): Promise<void>;
    private renderSearchToolbar;
    onReplaceInputKeyPress: (e: any) => void;
    private renderReplaceTextToolbar;
    replaceNext(): Promise<void>;
    get replaceHelper(): ReplaceHelper;
    replaceAll(): Promise<void>;
    render(): React.JSX.Element | null;
    focusSearchQueryInput(select?: boolean): void;
    get isMounted(): boolean;
    get visible(): boolean;
    componentWillUpdate(nextProps: Readonly<SearchPanelProps>, nextState: Readonly<FloatingSearchBarModel>, nextContext: any): void;
    set visible(visible: boolean);
    get viewer(): GcPdfViewer;
    get in17n(): i18n;
    toggle(expand?: boolean, replaceMode?: boolean): void;
    toggleReplaceMode(enable?: boolean): void;
    show(): void;
    hide(): void;
    _autoStartAfterInputChangeTimeout: any;
    autoStartAfterInputChange(): void;
    private _autoStartOnOptionToggleTimeout;
    autoStartOnOptionToggle(): void;
    get searchBackward(): boolean;
    continueSearch(backward?: boolean): Promise<void>;
    cancelAndResetAsyncSearch(): void;
    private _loadAllResultsAsyncActiveId;
    loadAllResults(curId?: string): void;
    private _toggleRootVisibility;
    renderSearchSettingsContent(): JSX.Element | null;
}
