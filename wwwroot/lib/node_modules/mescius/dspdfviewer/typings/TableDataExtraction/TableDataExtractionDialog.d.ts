/// <reference path="../vendor/react/react.d.ts" />
//@ts-ignore
import React, { Component, KeyboardEvent } from 'react';
import GcPdfViewer from "..";
/// <reference path="../vendor/i18next.d.ts" />
//@ts-ignore
import { i18n } from 'i18next';
import { TableDataExtractionDialogProps, TableDataExtractionDialogModel, TableDataExtractionDialogMode, ClientTableExtractOptions } from './types';
import { TableDataExtractionModel } from '../Models/ViewerTypes';
import { ISupportApi } from '../SupportApi/ISupportApi';
import { ExtractedTableData, TableDataExportFormat } from '../SupportApi/types';
export declare class TableDataExtractionDialog extends Component<TableDataExtractionDialogProps, TableDataExtractionDialogModel> {
    static readonly ROOT_ID_PREFIX: string;
    static readonly MAX_RANGE_EMPTY_PAGES_COUNT: number;
    private _hidePromise?;
    private _resolve?;
    private _viewer;
    state: {
        activatedEditorIndex: number;
        enabled: boolean;
        emptyResult: boolean;
        showModal: boolean;
        mode: TableDataExtractionDialogMode;
        pages: string;
        tablesData: ExtractedTableData[];
        workInProgress: boolean;
    };
    _dialogContentElem: HTMLDivElement | null;
    _mounted: boolean;
    componentDidMount(): void;
    componentWillUnmount(): void;
    get tablesData(): ExtractedTableData[];
    removeItem(replaceTextItemIndex: number): Promise<void>;
    createTableDataExtractionModelFromSelection(): Promise<any | null>;
    show(viewer: GcPdfViewer): Promise<void>;
    exportToFormatAndDownload(exportFormat: TableDataExportFormat): Promise<void>;
    hide(): void;
    render(): React.JSX.Element | null;
    renderSelectTextModeContent(): (JSX.Element | null)[];
    renderNormalModeContent(): (JSX.Element | null)[];
    renderTableDataExtractionItems(): JSX.Element | null;
    confirmTableDataExtractionItems(tablesData: TableDataExtractionModel[], newTableDataExtractionItemsCount: number): boolean;
    addTableDataExtractionItem(model: any, activateEditor?: boolean): void;
    onRangeInputKeyDown(event: KeyboardEvent<HTMLInputElement>, replaceTextItemIndex: number): void;
    get pages(): string;
    set pages(pages: string);
    renderTableDataExtractionActions(): JSX.Element | null;
    setInProgress(inProgress: boolean): void;
    get tableExtractOptions(): ClientTableExtractOptions;
    get isEmptyResult(): boolean;
    get supportApi(): ISupportApi;
    selectTextToReplace(): void;
    get mode(): TableDataExtractionDialogMode;
    set mode(val: TableDataExtractionDialogMode);
    clearTableDataExtractionItems(): void;
    private _resolveHidePromise;
    get in17n(): i18n;
}
