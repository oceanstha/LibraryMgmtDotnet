import { ReplaceTextModel } from "../Models/ViewerTypes";
import PdfReportPlugin from "../plugin";
import { HighlightArgs, HighlightBehaviorArgs, ICustomHighlight, ITextHighlightManager } from "./types";
export declare class TextHighlightManager implements ITextHighlightManager {
    private plugin;
    constructor(plugin: PdfReportPlugin);
    highlights: {
        [pageIndex: number]: ICustomHighlight[];
    };
    replaceHighlights: {
        [pageIndex: number]: ICustomHighlight[];
    };
    addReplaceHighlight(pageIndex: number, highlight: ICustomHighlight, args?: HighlightBehaviorArgs): {
        start: number;
        end: number;
    };
    addReplaceHighlights(pageIndex: number, highlights: ICustomHighlight[], args?: HighlightBehaviorArgs): {
        start: number;
        end: number;
    };
    get eventBus(): import("../Models/ViewerTypes").IGCEventBus;
    removeReplaceHighlight(pageIndex: number, index: number, args?: HighlightBehaviorArgs): void;
    removeReplaceHighlights(pageIndex: number, indices: {
        start: number;
        end: number;
    }, args?: HighlightBehaviorArgs): void;
    clearAllReplaceHighlights(args?: HighlightBehaviorArgs): void;
    addHighlight(pageIndex: number, highlight: ICustomHighlight, args?: HighlightBehaviorArgs): number;
    highlightTextSegment(pageIndex: number, startCharIndex: number, endCharIndex: number, args?: HighlightArgs): Promise<boolean>;
    clearHighlightedSegments(pageIndex: number | number[], args?: HighlightBehaviorArgs): void;
    removeHighlight(pageIndex: number, index: number, args?: HighlightBehaviorArgs): void;
    clearAllHighlights(args?: HighlightBehaviorArgs): void;
    getHighlightsForPage(pageIndex: number): ICustomHighlight[];
    getReplaceTextData(): ReplaceTextModel[] | undefined;
    repaintTextLayer(pageIndices?: number | number[]): void;
    cleanupDocument(): void;
}
