import { ReplaceTextModel } from "../Models/ViewerTypes";
export interface ICustomHighlight {
    rects: ({
        x: number;
        y: number;
        w: number;
        h: number;
    } | number[])[];
    color?: string;
    borderColor?: string;
    borderWidth?: number;
    text?: string;
    paintHandler?: (ctx: CanvasRenderingContext2D, highlight: ICustomHighlight) => void;
}
export type HighlightStyleArgs = {
    color?: string;
    borderColor?: string;
    borderWidth?: number;
};
export type HighlightBehaviorArgs = {
    clearPrevious?: boolean;
    skipPaint?: boolean;
};
export type HighlightArgs = HighlightStyleArgs & HighlightBehaviorArgs;
export interface ITextHighlightManager {
    highlightTextSegment(pageIndex: number, startCharIndex: number, endCharIndex: number, args?: {
        color?: string;
        borderColor?: string;
        borderWidth?: number;
        clearPrevious?: boolean;
        skipPaint?: boolean;
    }): Promise<boolean>;
    clearHighlightedSegments(pageIndex: number | number[], args?: HighlightBehaviorArgs): void;
    getHighlightsForPage(pageIndex: number): ICustomHighlight[];
    getReplaceTextData(): ReplaceTextModel[] | undefined;
    repaintTextLayer(pageIndices: number | number[]): void;
    addHighlight(pageIndex: number, highlight: ICustomHighlight, args?: HighlightBehaviorArgs): number;
    addReplaceHighlight(pageIndex: number, highlight: ICustomHighlight, args?: HighlightBehaviorArgs): {
        start: number;
        end: number;
    };
    addReplaceHighlights(pageIndex: number, highlights: ICustomHighlight[], args?: HighlightBehaviorArgs): {
        start: number;
        end: number;
    };
    removeReplaceHighlight(pageIndex: number, index: number, args?: HighlightBehaviorArgs): void;
    removeReplaceHighlights(pageIndex: number, indices: {
        start: number;
        end: number;
    }, args?: HighlightBehaviorArgs): void;
    clearAllReplaceHighlights(args?: HighlightBehaviorArgs): void;
    removeHighlight(pageIndex: number, index: number, args?: HighlightBehaviorArgs): any;
    clearAllHighlights(args?: HighlightBehaviorArgs): any;
    cleanupDocument(): any;
}
