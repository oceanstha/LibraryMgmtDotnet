import { AnnotationBase, StampAnnotation } from "../Annotations/AnnotationTypes";
import { DataStorage } from "../DataStorage/DataStorage";
import { FontFormat } from "../Models/ViewerTypes";
import { SharedRef } from "./SharedRef";
export declare function generateUid(caller?: string): string;
export declare function updateInitialRectPosition(annotation: AnnotationBase, newXY?: number[]): void;
export declare function resetStampAspectRatio(imageData: Uint8Array, viewer: any, pageIndex: number, originalNode: StampAnnotation, imageDpi?: number, select?: boolean): Promise<{
    pageIndex: number;
    annotation: AnnotationBase;
} | null>;
export declare function isTypedArray(arr: any): boolean;
export declare function mergeObject(destinationObj: any, sourceVal: any, preserveNonEmpty?: boolean, copyUndefined?: boolean): any;
export declare function cloneObject(obj: any): any;
export declare function getTransformMatrix(viewBox: number[], rotation: number, scaleX: number, scaleY: number, ignoreRotate?: boolean): number[];
export declare function adjustCoordinates(realViewBox: number[], point: number[], rotation: number, inverse?: boolean, fromBottomLeft?: boolean, scale?: number): number[];
export declare function getAxialAlignedBoundingBox(r: any, m: any): number[];
export declare function applyTransform(p: number[], m: number[]): number[];
export declare function applyInverseTransform(p: number[], m: number[]): number[];
export declare function inverseTransform(m: number[]): number[];
export declare function convertToViewportPoint(x: number, y: number, transform: number[]): number[];
export declare function convertToPdfPoint(x: number, y: number, transform: number[]): number[];
export declare function changeRectangleOrigin(bounds: number[], viewBox: number[], destOrigin?: 'TopLeft' | 'BottomLeft', normalize?: boolean): number[];
export declare function changeOriginToBottom(top: number, view: number[]): number;
export declare function changeOriginToTop(bottom: number, view: number[]): number;
export declare function pdfDateStringToDate(input?: string | Date): Date | null;
export declare function dateToPdfDateString(input: Date | string | any | number | undefined): string | null;
export declare function formatRelativeDate(date: Date | null, i18n: any, dateFormat?: string): string;
export declare function formatDateTime(date: Date, date_time_format?: string): string;
export declare function humanReadableFileSize(size: number, in17n: any): string;
export declare function getDefaultUserName(): string;
export declare function getActiveUserName(options?: any): string;
export declare function setActiveUserName(userName: string, setBy: 'annotation_editor' | 'user'): void;
export declare function attachHeadJs(src: string, id?: string, ownerDoc?: ShadowRoot | Document): Promise<any>;
export declare function stripHtmlTags(s: any): string;
export declare function cleanseRichText(text?: string): string;
export declare function attachHeadCss(css: any, id?: string, ownerDoc?: ShadowRoot | Document): void;
export declare function detachHeadJs(id: string, ownerDoc?: ShadowRoot | Document): void;
export declare function detachHeadCss(id: string, ownerDoc?: ShadowRoot | Document): void;
export declare function moveInkLists(inkLists: {
    x: number;
    y: number;
}[][], deltaX: number, deltaY: number): void;
export declare function getAccentTextColor(): string;
export declare function sortedIndex(array: number[], value: number): number;
export declare function isEditorModeEnabled(container: HTMLElement): boolean;
export declare function logMessage(msg: string): void;
export declare function logError(msg: any): void;
export declare function setInputCheckedState(element: HTMLInputElement, isChecked: boolean, linkService: any, fieldValue: string): void;
export declare function updateInputCheckedAppearance(input: HTMLInputElement, isChecked?: boolean, checkedButtonValue?: string | null): void;
export declare function updateAnnotationContentPosition(node: AnnotationBase, diffx?: number, diffy?: number): void;
export declare function clearAnnotationRotate(contentElement: HTMLElement): void;
export declare function applyAnnotationRotate2(contentElement: HTMLElement, data: AnnotationBase, force?: boolean): void;
export declare function applyAnnotationRotate(contentElement: HTMLElement, data: AnnotationBase, force?: boolean): void;
export declare function insertFirst(parent: HTMLElement, insertElem: HTMLElement): void;
export declare function initAnnotationRotateSupport(container: HTMLElement, data: AnnotationBase, element: HTMLElement | string): void;
export declare function calcRotationRectangles(node: AnnotationBase, rotationAngle: number, knownInitialRect?: number[]): void;
export declare function findRotationInit(rect: number[], angleDeg: number): number[];
export declare function updateRotationInit(annotation: AnnotationBase): void;
export declare function isAnnotationAllowsSelectTextBehind(annotationElement?: HTMLElement | null): boolean;
export declare function getStandardizedLanguageKey(lng: string | undefined, fallbackLng?: string | undefined): string;
export declare function injectSerializableFile(annotation: AnnotationBase, storage: DataStorage, filePrefix?: string): void;
export declare function generateRichMediaPoster(annotation: AnnotationBase, sharedRef: SharedRef, args?: {
    filePropName?: "posterFile" | "file";
    knownFileId?: string;
    width?: number;
    height?: number;
    foreColor?: string;
    backColor?: string;
    drawBackOnly?: boolean;
}): Promise<void>;
export declare function setImageFileFromCanvas(canvas: HTMLCanvasElement, annotation: AnnotationBase, sharedRef: SharedRef, filePropName?: "posterFile" | "file", disposeCanvas?: boolean, knownFileId?: string | undefined): Promise<void>;
export declare function getValueFromCssText(cssText: string, key: string): string | null;
export declare function loadFileData(url: string): Promise<Uint8Array>;
export declare function getFontFormatFromUrl(url: string, defaultFormat?: FontFormat): FontFormat | undefined;
