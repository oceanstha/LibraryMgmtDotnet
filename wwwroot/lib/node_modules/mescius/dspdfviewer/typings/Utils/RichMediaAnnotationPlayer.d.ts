import { RichMediaAnnotation } from "../Annotations/RichMediaAnnotation";
export declare function exitPictureInPictureMode(videoElement: HTMLVideoElement): Promise<void>;
export declare function requestPictureInPictureMode(videoElement: HTMLVideoElement): Promise<boolean>;
export declare class RichMediaAnnotationPlayer {
    container: HTMLElement;
    richMediaAnnotation: RichMediaAnnotation;
    viewer: any;
    private _initialized;
    private _html5MediaElement;
    private _unregisterViewerStateChange?;
    private _intersectionObserver?;
    private _audioOscilloscopeVisualizer?;
    private _streamVideoElement?;
    constructor(container: HTMLElement, richMediaAnnotation: RichMediaAnnotation, viewer: any);
    get activationCondition(): "XA" | "PO" | "PV";
    get deactivationCondition(): "XD" | "PC" | "PI";
    get annotationPageIndex(): number;
    get fileSpec(): {
        content: Uint8Array;
        filename: string;
    };
    get isFlash(): boolean;
    get isMp3(): boolean;
    get isAudio(): boolean;
    get mimeType(): string;
    get isWindowed(): boolean;
    get lowerFileName(): string;
    get paused(): boolean;
    togglePlayback(): void;
    play(): void;
    protected get richMediaAnnotationElement(): HTMLElement | undefined;
    protected onPlaybackStarted(): void;
    protected onPlaybackStopped(): void;
    get isPlaybackActivated(): boolean;
    stop(): void;
    pause(): void;
    private onViewerStateChange;
    get in17n(): any;
    onContentClick(): void;
    private initializeInternal;
    showClickToActivateTooltip(): void;
    hideClickToActivateTooltip(): void;
    private pauseHtml5Media;
    private stopHtml5Media;
    private _ensureHtml5MediaElement;
    onEnterPictureInPicture(): void;
    onLeavePictureInPicture(): void;
    private playHtml5Media;
    private tryExitPipMode;
    private removeCustomPiP;
    private createCustomPiP;
    private tryEnterPipMode;
    private static stopSwf;
    private static playSwf;
    private static playSwfInternal;
    private get isEditAnnotationsMode();
    private disposeIfNecessary;
    private disposeViewerStateChange;
    private disposeIntersectionObserver;
}
