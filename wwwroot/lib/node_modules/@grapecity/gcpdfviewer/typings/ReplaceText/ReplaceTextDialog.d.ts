/// <reference path="../vendor/react/react.d.ts" />
//@ts-ignore
import React, { Component, KeyboardEvent } from 'react';
import GcPdfViewer from "..";
/// <reference path="../vendor/i18next.d.ts" />
//@ts-ignore
import { i18n } from 'i18next';
import { ReplaceTextDialogProps, ReplaceTextDialogModel, ReplaceTextDialogMode } from './types';
import { ReplaceTextModel, SaveSettings } from '../Models/ViewerTypes';
import { ReplaceTextAnnotation } from '../Annotations/AnnotationTypes';
export declare class ReplaceTextDialog extends Component<ReplaceTextDialogProps, ReplaceTextDialogModel> {
    static readonly ROOT_ID_PREFIX: string;
    static readonly MAX_RANGE_EMPTY_PAGES_COUNT: number;
    private _hidePromise?;
    private _resolve?;
    private _viewer;
    state: {
        activatedEditorIndex: number;
        enabled: boolean;
        showModal: boolean;
        mode: ReplaceTextDialogMode;
        replaceTextItems: ReplaceTextAnnotation[];
        workInProgress: boolean;
    };
    _dialogContentElem: HTMLDivElement | null;
    _mounted: boolean;
    componentDidMount(): void;
    componentWillUnmount(): void;
    get replaceTextItems(): ReplaceTextAnnotation[];
    removeItem(replaceTextItemIndex: number): Promise<void>;
    getSaveSettings(downloadOnly?: boolean): SaveSettings;
    createReplaceTextModelFromSelection(): Promise<ReplaceTextAnnotation | null>;
    show(viewer: GcPdfViewer): Promise<void>;
    applyChanges(closeDialog?: boolean): Promise<boolean>;
    downloadChangedDocument(): Promise<void>;
    hide(): void;
    render(): React.JSX.Element | null;
    renderSelectTextModeContent(): (JSX.Element | null)[];
    renderNormalModeContent(): (JSX.Element | null)[];
    removeAllReplaceTextAnnotations(): Promise<void>;
    renderReplaceTextItems(): JSX.Element | null;
    confirmReplaceTextItems(replaceTextItems: ReplaceTextModel[], newReplaceTextItemsCount: number): boolean;
    addReplaceTextItem(model: ReplaceTextAnnotation, activateEditor?: boolean): void;
    onRangeInputKeyDown(event: KeyboardEvent<HTMLInputElement>, replaceTextItemIndex: number): void;
    renderReplaceTextActions(): JSX.Element | null;
    selectTextToReplace(): void;
    get mode(): ReplaceTextDialogMode;
    set mode(val: ReplaceTextDialogMode);
    clearReplaceTextItems(): void;
    private _resolveHidePromise;
    get in17n(): i18n;
}
